/*
 * Returns an approximation for node connectivity for a graph.
 */
procedure node_connectivity(G: graph) : int {	
	//check connected
	bool connected = true;
	
	foreach (s : G.nodes) {
		long foundNodes = 0;
	
		inBFS(v: G.nodes from s) {
			foundNodes++;
    
		}

		if (foundNodes != G.numNodes()) {
			connected &= false;
		}
	}

	if(!connected) {
		return 0;
	}
	
	int min_deg = +INF;
	node(G) x = NIL;
	
	for(n: G.nodes) {
		if((n.degree() + n.inDegree()) < min_deg) {
			x = n;
			min_deg = n.degree() + n.inDegree();
		}
	}
	int K = min_deg;
	
	N_S(G) xNbrs;
	for(n: x.nbrs) {xNbrs.add(n);}
	for(y: G.nodes) (!xNbrs.has(y) && x != y) {
		//K = min(K, local_node_connectivity(G, x, y, K));
		N_S(G) X;
		node(G) source = x;
		node(G) target = y;
		int possible = 0;
		if(source.degree() < target.inDegree()) {
			possible = source.degree();
		}
		else {
			possible = target.inDegree();
		}
		int K2 = 0;
		if(possible == 0) {K2 = 0;}

		bool pathFound = true;
		while(possible > 0 && pathFound && K2 < K) {
		
			map<node(G), node(G)> pred;
			map<node(G), node(G)> succ;
			pred[source] = NIL;
			succ[target] = NIL; 

			N_S(G) forSet;
			N_S(G) revSet;
			forSet.add(source);
			revSet.add(target);

			bool found = false;
			node(G) mid = NIL;
			int level = 0;
			N_S(G) this_level;
			while(!found && (forSet.size() != 0) && (revSet.size() != 0)) {
				level = level + 1;
				if(!(level % 2 == 0)) {
					this_level.clear();
					this_level = forSet;
					forSet.clear();
					for(v: this_level.items) (!found) {
						for(w: v.nbrs) ((!X.has(w)) && !found) {
							if(!pred.hasKey(w)) {
								forSet.add(w);
								pred[w] = v;
							}
							if(succ.hasKey(w)) {
								mid = w;
								found = true;
							}
						}
					}
				}
				else {
					this_level.clear();
					this_level = revSet;
					revSet.clear();
					for(v: this_level.items) (!found){
						for(w: v.inNbrs) ((!X.has(w)) && !found) {
							if(!succ.hasKey(w)) {
								succ[w] = v;
								revSet.add(w);
							}
							if(pred.hasKey(w)) {
								mid = w;
								found = true;
							}
						}
					}
				}
			}
			
			if(!found) {pathFound = false;}
			else {
				nodeSeq(G) path;
				node(G) f = NIL;
				if(mid != NIL) {f = succ[mid];}
			
				while(mid != NIL) {
					path.push(mid);
					mid = pred[mid];
				}
				while(f != NIL) {
					path.pushFront(f);
					f = succ[f];
				}

				foreach(s: path.items) {X.add(s);}
				K2++;
				possible--;
			}
		}

		if(K > K2) {
			K = K2;
		}
	}
	
	foreach(r: xNbrs.items) {
		N_S(G) rNbrs;
		foreach(l: r.nbrs) {rNbrs.add(l);}
		foreach(s: xNbrs.items) (s != r && !rNbrs.has(s)) {
			//K = min(K, local_node_connectivity(G, r, s, K));
			N_S(G) X;
			node(G) source = r;
			node(G) target = s;
			int possible = 0;
			if(source.degree() < target.inDegree()) {
				possible = source.degree();
			}
			else {
				possible = target.inDegree();
			}
			int K2 = 0;
			if(possible == 0) {K2 = 0;}

			bool pathFound = true;
			while(possible > 0 && pathFound && K2 < K) {
			
				map<node(G), node(G)> pred;
				map<node(G), node(G)> succ;
				pred[source] = NIL;
				succ[target] = NIL; 

				N_S(G) forSet;
				N_S(G) revSet;
				forSet.add(source);
				revSet.add(target);

				bool found = false;
				node(G) mid = NIL;
				int level = 0;
				int ll =0;
				N_S(G) this_level;
				while(!found && (forSet.size() != 0) && (revSet.size() != 0)) {
					level = level + 1;
					if(!(level % 2 == 0)) {
						this_level.clear();
						this_level = forSet;
						forSet.clear();
						for(v: this_level.items) (!found) {
							for(w: v.nbrs) ((!X.has(w)) && !found) {
								if(!pred.hasKey(w)) {
									forSet.add(w);
									pred[w] = v;
								}
								if(succ.hasKey(w)) {
									mid = w;
									found = true;
								}
							}
						}
					}
					else {
						this_level.clear();
						this_level = revSet;
						revSet.clear();
						for(v: this_level.items) (!found){
							for(w: v.inNbrs) ((!X.has(w)) && !found) {
								if(!succ.hasKey(w)) {
									succ[w] = v;
									revSet.add(w);
								}
								if(pred.hasKey(w)) {
									mid = w;
									found = true;
								}
							}
						}
					}
				}
				
				if(!found) {pathFound = false;}
				else {
					nodeSeq(G) path;
					node(G) f = NIL;
					if(mid != NIL) {f = succ[mid];}
				
					while(mid != NIL) {
						path.push(mid);
						mid = pred[mid];
					}
					while(f != NIL) {
						path.pushFront(f);
						f = succ[f];
					}

					foreach(i: path.items) {X.add(i);}
					K2++;
					possible--;
				}
			}

			if(K > K2) {
				K = K2;
			}
		}
	}
	return K;
}
